
trafficSignal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fef  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aee  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075f  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c5  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000165  00000000  00000000  00002e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002fda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 31       	cpi	r26, 0x1C	; 28
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	8d c1       	rjmp	.+794    	; 0x3c6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include "trafficSignal/trafficSignal.h"


int main(void)
{
	init();
  ae:	04 d1       	rcall	.+520    	; 0x2b8 <init>
	while (1)
	{
		exec();
  b0:	20 d1       	rcall	.+576    	; 0x2f2 <exec>
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x2>

000000b4 <TrafficSignal_Auto>:
  b4:	0f 93       	push	r16
button_t autoButton;
button_t manualButton;
button_t nextButton; 

void TrafficSignal_Auto()
{
  b6:	1f 93       	push	r17
	static uint32_t prevTime = 0;
	
	switch (trafficState)
  b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <trafficState>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	99 f1       	breq	.+102    	; 0x126 <TrafficSignal_Auto+0x72>
  c0:	38 f0       	brcs	.+14     	; 0xd0 <TrafficSignal_Auto+0x1c>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	09 f4       	brne	.+2      	; 0xc8 <TrafficSignal_Auto+0x14>
  c6:	5a c0       	rjmp	.+180    	; 0x17c <TrafficSignal_Auto+0xc8>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	09 f4       	brne	.+2      	; 0xce <TrafficSignal_Auto+0x1a>
  cc:	81 c0       	rjmp	.+258    	; 0x1d0 <TrafficSignal_Auto+0x11c>
  ce:	a8 c0       	rjmp	.+336    	; 0x220 <TrafficSignal_Auto+0x16c>
	{
		case RED_GREEN:
		redGreen();
  d0:	6a d1       	rcall	.+724    	; 0x3a6 <redGreen>
		//_delay_ms(3000);
		if (timeTick - prevTime >= 3000)
  d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
  d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
  da:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
  de:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
  e2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ea:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  ee:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  f2:	8c 01       	movw	r16, r24
  f4:	9d 01       	movw	r18, r26
  f6:	04 1b       	sub	r16, r20
  f8:	15 0b       	sbc	r17, r21
  fa:	26 0b       	sbc	r18, r22
  fc:	37 0b       	sbc	r19, r23
  fe:	b9 01       	movw	r22, r18
 100:	a8 01       	movw	r20, r16
 102:	48 3b       	cpi	r20, 0xB8	; 184
 104:	5b 40       	sbci	r21, 0x0B	; 11
 106:	61 05       	cpc	r22, r1
 108:	71 05       	cpc	r23, r1
 10a:	08 f4       	brcc	.+2      	; 0x10e <TrafficSignal_Auto+0x5a>
 10c:	89 c0       	rjmp	.+274    	; 0x220 <TrafficSignal_Auto+0x16c>
		{
			prevTime = timeTick;
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 11a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = RED_YELLOW;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <trafficState>
		}
		break;
		
		case RED_YELLOW:
		redYellow();
 124:	7d c0       	rjmp	.+250    	; 0x220 <TrafficSignal_Auto+0x16c>
 126:	43 d1       	rcall	.+646    	; 0x3ae <redYellow>
		//_delay_ms(1000);
		if (timeTick - prevTime >= 1000)
 128:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 12c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 130:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 134:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 138:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 140:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 144:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 148:	8c 01       	movw	r16, r24
 14a:	9d 01       	movw	r18, r26
 14c:	04 1b       	sub	r16, r20
 14e:	15 0b       	sbc	r17, r21
 150:	26 0b       	sbc	r18, r22
 152:	37 0b       	sbc	r19, r23
 154:	b9 01       	movw	r22, r18
 156:	a8 01       	movw	r20, r16
 158:	48 3e       	cpi	r20, 0xE8	; 232
 15a:	53 40       	sbci	r21, 0x03	; 3
 15c:	61 05       	cpc	r22, r1
 15e:	71 05       	cpc	r23, r1
 160:	08 f4       	brcc	.+2      	; 0x164 <TrafficSignal_Auto+0xb0>
 162:	5e c0       	rjmp	.+188    	; 0x220 <TrafficSignal_Auto+0x16c>
		{
			prevTime = timeTick;
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 170:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = GREEN_RED;
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <trafficState>
		}
		break;
		
		case GREEN_RED:
		greenRed();
 17a:	52 c0       	rjmp	.+164    	; 0x220 <TrafficSignal_Auto+0x16c>
 17c:	1c d1       	rcall	.+568    	; 0x3b6 <greenRed>
		//_delay_ms(3000);
		if (timeTick - prevTime >= 3000)
 17e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 182:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 186:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 18a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 18e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 196:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 19e:	8c 01       	movw	r16, r24
 1a0:	9d 01       	movw	r18, r26
 1a2:	04 1b       	sub	r16, r20
 1a4:	15 0b       	sbc	r17, r21
 1a6:	26 0b       	sbc	r18, r22
 1a8:	37 0b       	sbc	r19, r23
 1aa:	b9 01       	movw	r22, r18
 1ac:	a8 01       	movw	r20, r16
 1ae:	48 3b       	cpi	r20, 0xB8	; 184
 1b0:	5b 40       	sbci	r21, 0x0B	; 11
 1b2:	61 05       	cpc	r22, r1
 1b4:	71 05       	cpc	r23, r1
 1b6:	a0 f1       	brcs	.+104    	; 0x220 <TrafficSignal_Auto+0x16c>
		{
			prevTime = timeTick;
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1c4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = YELLOW_RED;
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <trafficState>
		}
		break;
		
		case YELLOW_RED:
		yellowRed();
 1ce:	28 c0       	rjmp	.+80     	; 0x220 <TrafficSignal_Auto+0x16c>
 1d0:	f6 d0       	rcall	.+492    	; 0x3be <yellowRed>
		//_delay_ms(1000);
		if (timeTick - prevTime >= 1000)
 1d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 1d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 1da:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 1de:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 1e2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ea:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ee:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1f2:	8c 01       	movw	r16, r24
 1f4:	9d 01       	movw	r18, r26
 1f6:	04 1b       	sub	r16, r20
 1f8:	15 0b       	sbc	r17, r21
 1fa:	26 0b       	sbc	r18, r22
 1fc:	37 0b       	sbc	r19, r23
 1fe:	b9 01       	movw	r22, r18
 200:	a8 01       	movw	r20, r16
 202:	48 3e       	cpi	r20, 0xE8	; 232
 204:	53 40       	sbci	r21, 0x03	; 3
 206:	61 05       	cpc	r22, r1
 208:	71 05       	cpc	r23, r1
 20a:	50 f0       	brcs	.+20     	; 0x220 <TrafficSignal_Auto+0x16c>
		{
			prevTime = timeTick;
 20c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 210:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 214:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 218:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = RED_GREEN;
 21c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <trafficState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <TrafficSignal_Auto+0x170>
 228:	00 c0       	rjmp	.+0      	; 0x22a <TrafficSignal_Auto+0x176>
 22a:	00 00       	nop
		}
		break;
	}
	_delay_ms(10);
	timeTick += 10;
 22c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 230:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 234:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 238:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 23c:	0a 96       	adiw	r24, 0x0a	; 10
 23e:	a1 1d       	adc	r26, r1
 240:	b1 1d       	adc	r27, r1
 242:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timeTick>
 246:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timeTick+0x1>
 24a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <timeTick+0x2>
 24e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <timeTick+0x3>
}
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <TrafficSignal_Manual>:

void TrafficSignal_Manual()
{
	switch (trafficState)
 258:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <trafficState>
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	81 f0       	breq	.+32     	; 0x280 <TrafficSignal_Manual+0x28>
 260:	28 f0       	brcs	.+10     	; 0x26c <TrafficSignal_Manual+0x14>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	b1 f0       	breq	.+44     	; 0x292 <TrafficSignal_Manual+0x3a>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	f1 f0       	breq	.+60     	; 0x2a6 <TrafficSignal_Manual+0x4e>
 26a:	08 95       	ret
	{
		case RED_GREEN:
		redGreen();
 26c:	9c d0       	rcall	.+312    	; 0x3a6 <redGreen>
		if (Button_GetState(&nextButton) == ACT_RELEASED)
 26e:	8f e0       	ldi	r24, 0x0F	; 15
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	6d d0       	rcall	.+218    	; 0x34e <Button_GetState>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	f9 f4       	brne	.+62     	; 0x2b6 <TrafficSignal_Manual+0x5e>
			trafficState = RED_YELLOW;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <trafficState>
		break;

		case RED_YELLOW:
		redYellow();
 27e:	08 95       	ret
		if (Button_GetState(&nextButton) == ACT_RELEASED)
 280:	96 d0       	rcall	.+300    	; 0x3ae <redYellow>
 282:	8f e0       	ldi	r24, 0x0F	; 15
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	63 d0       	rcall	.+198    	; 0x34e <Button_GetState>
 288:	82 30       	cpi	r24, 0x02	; 2
			trafficState = GREEN_RED;
 28a:	a9 f4       	brne	.+42     	; 0x2b6 <TrafficSignal_Manual+0x5e>
 28c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <trafficState>
		break;

		case GREEN_RED:
		greenRed();
 290:	08 95       	ret
		if (Button_GetState(&nextButton) == ACT_RELEASED)
 292:	91 d0       	rcall	.+290    	; 0x3b6 <greenRed>
 294:	8f e0       	ldi	r24, 0x0F	; 15
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	5a d0       	rcall	.+180    	; 0x34e <Button_GetState>
 29a:	82 30       	cpi	r24, 0x02	; 2
			trafficState = YELLOW_RED;
 29c:	61 f4       	brne	.+24     	; 0x2b6 <TrafficSignal_Manual+0x5e>
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <trafficState>
		break;

		case YELLOW_RED:
		yellowRed();
 2a4:	08 95       	ret
		if (Button_GetState(&nextButton) == ACT_RELEASED)
 2a6:	8b d0       	rcall	.+278    	; 0x3be <yellowRed>
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	50 d0       	rcall	.+160    	; 0x34e <Button_GetState>
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	11 f4       	brne	.+4      	; 0x2b6 <TrafficSignal_Manual+0x5e>
			trafficState = RED_GREEN;
 2b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <trafficState>
 2b6:	08 95       	ret

000002b8 <init>:
	}
}

void init()
{
	trafficModeState = AUTO;
 2b8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <trafficModeState>
	trafficState = RED_GREEN;
 2bc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <trafficState>

    Button_init(&autoButton, &BUTTON_DDR, &BUTTON_PIN, 0);
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	49 e3       	ldi	r20, 0x39	; 57
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	6a e3       	ldi	r22, 0x3A	; 58
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	86 e1       	ldi	r24, 0x16	; 22
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	2b d0       	rcall	.+86     	; 0x326 <Button_init>
    Button_init(&manualButton, &BUTTON_DDR, &BUTTON_PIN, 1);
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	49 e3       	ldi	r20, 0x39	; 57
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	6a e3       	ldi	r22, 0x3A	; 58
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	89 e0       	ldi	r24, 0x09	; 9
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	23 d0       	rcall	.+70     	; 0x326 <Button_init>
    Button_init(&nextButton, &BUTTON_DDR, &BUTTON_PIN, 2);
 2e0:	22 e0       	ldi	r18, 0x02	; 2
 2e2:	49 e3       	ldi	r20, 0x39	; 57
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	6a e3       	ldi	r22, 0x3A	; 58
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	8f e0       	ldi	r24, 0x0F	; 15
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	1b c0       	rjmp	.+54     	; 0x326 <Button_init>
 2f0:	08 95       	ret

000002f2 <exec>:
}

void exec()
{
		if (Button_GetState(&autoButton) == ACT_RELEASED)
 2f2:	86 e1       	ldi	r24, 0x16	; 22
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	2b d0       	rcall	.+86     	; 0x34e <Button_GetState>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	11 f4       	brne	.+4      	; 0x300 <exec+0xe>
			trafficModeState = AUTO;
 2fc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <trafficModeState>
		if (Button_GetState(&manualButton) == ACT_RELEASED)
 300:	89 e0       	ldi	r24, 0x09	; 9
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	24 d0       	rcall	.+72     	; 0x34e <Button_GetState>
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	19 f4       	brne	.+6      	; 0x310 <exec+0x1e>
			trafficModeState = MANUAL;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <trafficModeState>
		
		switch(trafficModeState)
 310:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <trafficModeState>
 314:	88 23       	and	r24, r24
 316:	19 f0       	breq	.+6      	; 0x31e <exec+0x2c>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	19 f0       	breq	.+6      	; 0x322 <exec+0x30>
		{
			case (AUTO):
			TrafficSignal_Auto();
 31c:	08 95       	ret
			break;
 31e:	ca ce       	rjmp	.-620    	; 0xb4 <TrafficSignal_Auto>
			
			case (MANUAL):
			TrafficSignal_Manual();
 320:	08 95       	ret
 322:	9a cf       	rjmp	.-204    	; 0x258 <TrafficSignal_Manual>
 324:	08 95       	ret

00000326 <Button_init>:
﻿#include "Button_Driver.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 326:	fc 01       	movw	r30, r24
	btn ->DDR = ddr;		// 포변일때는 -> 사용
 328:	71 83       	std	Z+1, r23	; 0x01
 32a:	60 83       	st	Z, r22
	btn ->PIN = pin;
 32c:	53 83       	std	Z+3, r21	; 0x03
 32e:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 330:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	85 83       	std	Z+5, r24	; 0x05
	*btn ->DDR &= (1 << btn -> pinNum);
 336:	fb 01       	movw	r30, r22
 338:	30 81       	ld	r19, Z
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <Button_init+0x1e>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	2a 95       	dec	r18
 346:	e2 f7       	brpl	.-8      	; 0x340 <Button_init+0x1a>
 348:	83 23       	and	r24, r19
 34a:	80 83       	st	Z, r24
 34c:	08 95       	ret

0000034e <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //*btn 주소 유효범위 button_t
{
 34e:	fc 01       	movw	r30, r24
	uint8_t curState = *btn -> PIN & (1<<btn -> pinNum);
 350:	a2 81       	ldd	r26, Z+2	; 0x02
 352:	b3 81       	ldd	r27, Z+3	; 0x03
 354:	8c 91       	ld	r24, X
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	04 80       	ldd	r0, Z+4	; 0x04
 35c:	02 c0       	rjmp	.+4      	; 0x362 <Button_GetState+0x14>
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <Button_GetState+0x10>
 366:	28 23       	and	r18, r24
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED))
 368:	59 f4       	brne	.+22     	; 0x380 <Button_GetState+0x32>
 36a:	85 81       	ldd	r24, Z+5	; 0x05
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	41 f4       	brne	.+16     	; 0x380 <Button_GetState+0x32>
 370:	af e3       	ldi	r26, 0x3F	; 63
 372:	bc e9       	ldi	r27, 0x9C	; 156
 374:	11 97       	sbiw	r26, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <Button_GetState+0x26>
 378:	00 c0       	rjmp	.+0      	; 0x37a <Button_GetState+0x2c>
 37a:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 37c:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 37e:	08 95       	ret
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED))
 380:	22 23       	and	r18, r18
 382:	69 f0       	breq	.+26     	; 0x39e <Button_GetState+0x50>
 384:	85 81       	ldd	r24, Z+5	; 0x05
 386:	81 11       	cpse	r24, r1
 388:	0c c0       	rjmp	.+24     	; 0x3a2 <Button_GetState+0x54>
 38a:	8f e3       	ldi	r24, 0x3F	; 63
 38c:	9c e9       	ldi	r25, 0x9C	; 156
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <Button_GetState+0x40>
 392:	00 c0       	rjmp	.+0      	; 0x394 <Button_GetState+0x46>
 394:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	08 95       	ret
		
	}
	return ACT_NONE;
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret
 3a2:	80 e0       	ldi	r24, 0x00	; 0
}
 3a4:	08 95       	ret

000003a6 <redGreen>:
﻿#include "LED_Driver.h"

void redGreen()
{
	PORTF = ((1<<0) | (1<<4));
 3a6:	81 e1       	ldi	r24, 0x11	; 17
 3a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ac:	08 95       	ret

000003ae <redYellow>:
}

void redYellow()
{
	PORTF = ((1<<0) | (1<<5));
 3ae:	81 e2       	ldi	r24, 0x21	; 33
 3b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3b4:	08 95       	ret

000003b6 <greenRed>:
}

void greenRed()
{
	PORTF = ((1<<1) | (1<<3));
 3b6:	8a e0       	ldi	r24, 0x0A	; 10
 3b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3bc:	08 95       	ret

000003be <yellowRed>:
}

void yellowRed()
{
	PORTF = ((1<<2) | (1<<3));
 3be:	8c e0       	ldi	r24, 0x0C	; 12
 3c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
